AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31


Parameters:
  ApplicationName:
    Type: String
    Description: The application name that is being deployed
  EnvironmentName:
    Type: String
    Description: The environment in which the stack will be deployed
  HostedZoneName:
    Type: String
    Description: The name of the hosted zone where DNS should be placed
  DomainName:
    Type: String
    Description: The domain name the application will be behind
  CertificateArn:
    Type: String
    Description: The ARN of the ACM certificate
  TableArn:
    Type: String
    Description: The ARN of the dynamodb table
  TableName:
    Type: String
    Description: The name of the dynamodb table


Globals:
  Function:
    Runtime: nodejs16.x
    MemorySize: 1024
    Timeout: 5
    Tracing: PassThrough
    CodeUri: ../artifacts/dist.zip
    Environment:
      Variables:
        APPLICATION_NAME: !Ref ApplicationName
        ENVIRONMENT_NAME: !Ref EnvironmentName
        TABLE_NAME: !Ref TableName


Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: allow-dynamo-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource:
                  - !Sub ${TableArn}
                  - !Sub ${TableArn}/index/*

  GetDocumentation:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-${EnvironmentName}-get-documentation
      Handler: handlers/api/documentation.handler
      Role: !GetAtt LambdaRole.Arn
  GetDocumentationLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetDocumentation}

  ListUrls:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-${EnvironmentName}-list-urls
      Handler: handlers/api/urls.listHandler
      Role: !GetAtt LambdaRole.Arn
  ListUrlsLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ListUrls}

  CreateUrl:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-${EnvironmentName}-create-url
      Handler: handlers/api/urls.createHandler
      Role: !GetAtt LambdaRole.Arn
  CreateUrlLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${CreateUrl}

  GetUrl:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-${EnvironmentName}-get-url
      Handler: handlers/api/urls.getHandler
      Role: !GetAtt LambdaRole.Arn
  GetUrlLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetUrl}

  UpdateUrl:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-${EnvironmentName}-put-url
      Handler: handlers/api/urls.putHandler
      Role: !GetAtt LambdaRole.Arn
  UpdateUrlLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpdateUrl}

  DeleteUrl:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ApplicationName}-${EnvironmentName}-delete-url
      Handler: handlers/api/urls.deleteHandler
      Role: !GetAtt LambdaRole.Arn
  DeleteUrlLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteUrl}

  ApiServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: !Sub API_Service_Role_Policy_${EnvironmentName}-${AWS::Region}
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: lambda:InvokeFunction
                Effect: Allow
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*

  ApiGatewayDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Sub api.${DomainName}
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref CertificateArn
          CertificateName: !Sub ${ApplicationName}-${EnvironmentName}-cert

  ApiGatewayMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      DomainName: !Ref ApiGatewayDomainName
      Stage: !Ref ApiStage

  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Sub '{{resolve:ssm:/dns/${HostedZoneName}/hosted-zone-id}}'
      Type: A
      Name: !Sub api.${DomainName}.
      AliasTarget:
        HostedZoneId: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId
        DNSName: !GetAtt ApiGatewayDomainName.RegionalDomainName

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${ApplicationName}-${EnvironmentName}
      RetentionInDays: 7

  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref EnvironmentName
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength", "errorResponseType":"$context.error.responseType", "message":"$context.error.message", "integrationErrorMessage":"$context.integrationErrorMessage", "authorizerError":"$context.authorizer.error" }'
      DefinitionBody:
        openapi: '3.0.1'
        info:
          title: !Sub ${ApplicationName}-${EnvironmentName}-api
          description: Serverless API
          version: '1.0'
        paths:
          /docs:
            get:
              operationId: getDocumentation
              summary: Get OpenAPI spec
              description: Get the OpenAPI specification as HTML or JSON.
              x-amazon-apigateway-integration:
                connectionType: INTERNET
                credentials: !GetAtt ApiServiceRole.Arn
                httpMethod: POST
                payloadFormatVersion: '2.0'
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDocumentation.Arn}/invocations
              parameters:
                - in: query
                  name: format
                  description: The format to return the openapi spec (json, default=html)
                  schema: { type: string }
              responses:
                '200': { $ref: '#/components/responses/getDocumentationResponse' }
          /urls:
            get:
              operationId: listUrls
              summary: List URLS
              description: List all registered URLs for the authenticated user
              x-amazon-apigateway-integration:
                connectionType: INTERNET
                credentials: !GetAtt ApiServiceRole.Arn
                httpMethod: POST
                payloadFormatVersion: '2.0'
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListUrls.Arn}/invocations
              parameters:
                - in: query
                  name: nextToken
                  description: A token used to query the next page of results
                  schema: { type: string }
              responses:
                '200': { $ref: '#/components/responses/listUrlsResponse' }
            post:
              operationId: createUrl
              summary: Create a URL redirect
              description: Create a URL redirect for the authenticated user
              x-amazon-apigateway-integration:
                connectionType: INTERNET
                credentials: !GetAtt ApiServiceRole.Arn
                httpMethod: POST
                payloadFormatVersion: '2.0'
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateUrl.Arn}/invocations
              requestBody:
                description: POST /urls request
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/url'
              responses:
                '200': { $ref: '#/components/responses/createUrlResponse' }
          /urls/{urlId}:
            get:
              operationId: getUrl
              summary: Get a URL
              description: Get a specific URL for the authenticated user
              x-amazon-apigateway-integration:
                connectionType: INTERNET
                credentials: !GetAtt ApiServiceRole.Arn
                httpMethod: POST
                payloadFormatVersion: '2.0'
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUrl.Arn}/invocations
              parameters:
                - in: path
                  name: urlId
                  description: The name of the URL
                  schema: { type: string }
                  required: true
              responses:
                '200': { $ref: '#/components/responses/getUrlResponse' }
            put:
              operationId: updateUrl
              summary: Update a URL
              description: Update a specific url for the authenticated user
              x-amazon-apigateway-integration:
                connectionType: INTERNET
                credentials: !GetAtt ApiServiceRole.Arn
                httpMethod: POST
                payloadFormatVersion: '2.0'
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateUrl.Arn}/invocations
              parameters:
                - in: path
                  name: urlId
                  description: The name of the URL
                  schema: { type: string }
                  required: true
              requestBody:
                description: PUT /urls/{urlId} request
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/url'
              responses:
                '200': { $ref: '#/components/responses/updateUrlResponse' }
            delete:
              operationId: deleteUrl
              summary: Delete a URL
              description: Delete a specific url for the authenticated user
              x-amazon-apigateway-integration:
                connectionType: INTERNET
                credentials: !GetAtt ApiServiceRole.Arn
                httpMethod: POST
                payloadFormatVersion: '2.0'
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteUrl.Arn}/invocations
              parameters:
                - in: path
                  name: urlId
                  description: The name of the URL
                  schema: { type: string }
                  required: true
              responses:
                '200': { $ref: '#/components/responses/deleteUrlResponse' }
        components:
          requestBodies: {}
          responses:
            getDocumentationResponse:
              description: GET /docs response
              content:
                text/html:
                  schema:
                    $ref: '#/components/schemas/documentationHtml'
                application/json:
                  schema:
                    $ref: '#/components/schemas/documentationJson'
            listUrlsResponse:
              description: GET /urls response
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/paginatedUrlList'
            createUrlResponse:
              description: POST /urls response
              content:
                application/json:
                  schema:
                    allOf:
                      - $ref: '#/components/schemas/url'
                    required:
                      - target
            getUrlResponse:
              description: GET /urls/{urlId} response
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/url'
            updateUrlResponse:
              description: PUT /urls/{urlId} response
              content:
                application/json:
                  schema:
                    allOf:
                      - $ref: '#/components/schemas/url'
            deleteUrlResponse:
              description: DELETE /urls/{urlId} response
          schemas:
            documentationHtml:
              type: string
            documentationJson:
              type: object
            paginatedUrlList:
              type: object
              additionalProperties: false
              required:
                - urls
              properties:
                urls:
                  $ref: '#/components/schemas/urlList'
                nextToken:
                  type: string
            urlList:
              type: array
              items:
                $ref: '#/components/schemas/url'
            url:
              type: object
              additionalProperties: false
              properties:
                id:
                  type: string
                  description: the ID of the URL (slug that's used to redirect)
                  readOnly: true
                name:
                  type: string
                  description: the user-defined name of the URL
                description:
                  type: string
                  description: the user-defined description of the URL
                target:
                  type: string
                  description: the target https URL to redirect to
                  format: uri
                status:
                  type: string
                  enum:
                    - ACTIVE
                    - INACTIVE
                    - DELETED
                  description: the status of the URL


Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for the API
    Value: !Sub https://api.${DomainName}/
